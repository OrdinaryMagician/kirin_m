// Bless the cute emperor 🍑

Class KirinPlayer : SWWMPlayer
{
	int SpellSel;

	Default
	{
		Tag "$T_KIRIN";
		Height 53;
		Mass 60;
		Player.DisplayName "$T_KIRIN";
		Player.StartItem "KirinPistol";
		Player.StartItem "KirinPistolAmmo", 16;
		Player.StartItem "KirinUnarmed";
		Player.StartItem "KirinMana", 100;
		Player.StartItem "KirinInternalArmor";
		Player.JumpZ 9;
		Player.AttackZOffset 10;
		Player.ViewHeight 49;
		Player.SoundClass "kirin";
		Player.ViewBob .7;
		SWWMPlayer.MoveSpeed .5, 1.2;
		SWWMPlayer.DodgeSpeed 15;
		SWWMPlayer.ResurrectType RT_RESPAWN;
		SWWMPlayer.PainThresholds 0, 10, 30, 50;
		+SWWMPLAYER.CANDODGE;
		+SWWMPLAYER.CANWALLCLIMB;
	}

	override void Die( Actor source, Actor inflictor, int dmgflags, Name MeansOfDeath )
	{
		Super.Die(source,inflictor,dmgflags,MeansOfDeath);
		MaxHealth = StartHealth = max(50,SpawnHealth()-10);
	}

	override Weapon PickWeapon( int slot, bool checkammo )
	{
		if ( (slot >= 6) && (slot <= 9) ) EventHandler.SendNetworkEvent("kirinspellslot",slot-6);
		else if ( slot == 0 ) EventHandler.SendNetworkEvent("kirinspellslot",4);
		else return Super.PickWeapon(slot,checkammo);
		return player.ReadyWeapon;
	}
}

// event handler hook needed because player_t::Resurrect() does not respect SpawnHealth
extend Class SWWMHandler
{
	override void PlayerRespawned( PlayerEvent e )
	{
		PlayerInfo p = players[e.PlayerNumber];
		if ( p.mo && (p.mo is 'KirinPlayer') )
			p.Health = p.mo.Health = p.mo.SpawnHealth();
	}
}
